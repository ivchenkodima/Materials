// Функции

// Параметры по умолчанию

// Можно указывать параметры по умолчанию через равенство =, например:

 function showMenu(title = "Без заголовка", width = 100, height = 200) {
  alert(title + ' ' + width + ' ' + height);
}

showMenu("Меню"); // Меню 100 200


// Параметр по умолчанию используется при отсутствующем аргументе или равном undefined, например:

 function showMenu(title = "Заголовок", width = 100, height = 200) {
  alert('title=' + title + ' width=' + width + ' height=' + height);
}

// По умолчанию будут взяты 1 и 3 параметры
// title=Заголовок width=null height=200
showMenu(undefined, null);



// Параметры по умолчанию могут быть не только значениями, но и выражениями.

// Например:

 function sayHi(who = getCurrentUser().toUpperCase()) {
  alert('Привет, ' + who);
}

function getCurrentUser() {
  return 'Вася';
}

sayHi(); // Привет, ВАСЯ

====================================================================

// Оператор spread вместо arguments

function showName(firstName, lastName, ...rest) {
  alert(firstName + ' ' + lastName + ' - ' + rest);
}

// выведет: Юлий Цезарь - Император,Рима
showName("Юлий", "Цезарь", "Император", "Рима");



// Оператор … должен быть в конце
// Оператор … собирает «все оставшиеся» аргументы, поэтому такое объявление не имеет смысла:

function f(arg1, ...rest, arg2) { // arg2 после ...rest ?!
  // будет ошибка
}
// Параметр ...rest должен быть в конце функции.

====================================================================
'use strict';

let numbers = [2, 3, 15];

// Оператор ... в вызове передаст массив как список аргументов
// Этот вызов аналогичен Math.max(2, 3, 15)
let max = Math.max(...numbers);

alert( max ); // 15

====================================================================

'use strict';

if (true) {

  sayHi(); // работает

  function sayHi() {
    alert("Привет!");
  }

}
sayHi(); // ошибка, функции не существует

====================================================================

// функции через =>

// Появился новый синтаксис для задания функций через «стрелку» =>.
// Его простейший вариант выглядит так:

'use strict';

let inc = x => x+1;
// let inc = function(x) { return x + 1; };

alert( inc(1) ); // 2



// Если аргументов несколько, то нужно обернуть их в скобки, вот так:

'use strict';
let sum = (a,b) => a + b;
// аналог с function
// let inc = function(a, b) { return a + b; };
alert( sum(1, 2) ); // 3


// Если нужно задать функцию без аргументов, то также используются скобки, в этом случае – пустые:
'use strict';
// вызов getTime() будет возвращать текущее время
let getTime = () => new Date().getHours() + ':' + new Date().getMinutes();
alert( getTime() ); // текущее время


// Когда тело функции достаточно большое, то можно его обернуть в фигурные скобки {…}:
'use strict';
let getTime = () => {
  let date = new Date();
  let hours = date.getHours();
  let minutes = date.getMinutes();
  return hourse + ':' + minutes;
};
alert( getTime() ); // текущее время
// Заметим, что как только тело функции 
// оборачивается в {…}, то её результат 
// уже не возвращается автоматически. 
// Такая функция должна делать явный
 // return, как в примере выше, если конечно хочет что-либо возвратить.

// Функции-стрелки очень удобны в качестве коллбеков, например:
'use strict';

let arr = [5, 8, 3];
let sorted = arr.sort( (a,b) => a - b );
alert(sorted); // 3, 5, 8















